---
########## PERSISTENT VOLUMES ##########
apiVersion: v1
kind: PersistentVolume
metadata:
  name: romm-lib-pv
spec:
  accessModes:
    - ReadWriteOnce
  capacity:
    storage: 60Ti
  claimRef:
    apiVersion: v1
    kind: PersistentVolumeClaim
    name: romm-lib-pvc
    namespace: media
  mountOptions:
    - hard
    - nfsvers=4.1
  nfs:
    path: /mnt/silo/data/games/library # path of the nfs share
    server: 172.31.31.3 # IP of the NFS server
  persistentVolumeReclaimPolicy: Retain # do not automatically delete data
  volumeMode: Filesystem

---
########## PERSISTENT VOLUME CLAIMS ##########
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: romm-config-pvc
  namespace: media
spec:
  storageClassName: "longhorn"
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 800Mi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: romm-redis-pvc
  namespace: media
spec:
  storageClassName: "longhorn"
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: romm-lib-pvc
  namespace: media
spec:
  storageClassName: ""
  volumeName: romm-lib-pv
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 20Ti

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: romm-assets-pvc
  namespace: media
spec:
  storageClassName: "longhorn"
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 800Mi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: romm-resources-pvc
  namespace: media
spec:
  storageClassName: "longhorn"
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 12Gi

---
########### APPLICATION DEPLOYMENT ##########
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: romm
  name: romm-app
  namespace: media
spec:
  replicas: 1
  selector:
    matchLabels:
      app: romm
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: romm
    spec:
      initContainers:
        - name: wait-for-mariadb
          image: busybox
          command:
            [
              "sh",
              "-c",
              'until nc -z romm-db-svc 3306; do echo "Waiting for DB..."; sleep 5; done;',
            ]
      securityContext:
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
      containers:
        - image: rommapp/romm:3.10.1
          name: romm
          ports:
            - containerPort: 8080
          resources: {}
          env:
            - name: DB_HOST
              value: romm-db-svc
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: romm-secret
                  key: MYSQL_DATABASE
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: romm-secret
                  key: MYSQL_USER
            - name: DB_PASSWD
              valueFrom:
                secretKeyRef:
                  name: romm-secret
                  key: MYSQL_PASSWORD
            - name: ROMM_AUTH_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: romm-secret
                  key: ROMM_AUTH_SECRET_KEY
            - name: IGDB_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: romm-secret
                  key: IGDB_CLIENT_ID
            - name: IGDB_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: romm-secret
                  key: IGDB_CLIENT_SECRET
            - name: MOBYGAMES_API_KEY
              valueFrom:
                secretKeyRef:
                  name: romm-secret
                  key: MOBYGAMES_API_KEY
            - name: STEAMGRIDDB_API_KEY
              valueFrom:
                secretKeyRef:
                  name: romm-secret
                  key: STEAMGRIDDB_API_KEY
            - name: SCREENSCRAPER_USER
              valueFrom:
                secretKeyRef:
                  name: romm-secret
                  key: SCREENSCRAPER_USER
            - name: SCREENSCRAPER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: romm-secret
                  key: SCREENSCRAPER_PASSWORD
          volumeMounts:
            - mountPath: "/romm/resources"
              name: romm-resources-vol
            - mountPath: "/redis-data"
              name: romm-redis-vol
            - mountPath: "/romm/library"
              name: romm-lib-vol
            - mountPath: "/romm/assets"
              name: romm-assets-vol
            - mountPath: "/romm/config"
              name: romm-config-vol
      dnsConfig:
        nameservers:
          - 8.8.8.8
          - 8.8.4.4
      volumes:
        - name: romm-resources-vol
          persistentVolumeClaim:
            claimName: romm-resources-pvc
        - name: romm-redis-vol
          persistentVolumeClaim:
            claimName: romm-redis-pvc
        - name: romm-lib-vol
          persistentVolumeClaim:
            claimName: romm-lib-pvc
        - name: romm-assets-vol
          persistentVolumeClaim:
            claimName: romm-assets-pvc
        - name: romm-config-vol
          persistentVolumeClaim:
            claimName: romm-config-pvc

---
########## NETWORK SERVICES ##########
apiVersion: v1
kind: Service
metadata:
  name: romm-svc
  namespace: media
spec:
  selector:
    app: romm
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: romm-ingress
  namespace: media
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx
  rules:
    - host: "romm.bugaychuk.com"
      http:
        paths:
          - pathType: Prefix
            path: "/"
            backend:
              service:
                name: romm-svc
                port:
                  number: 80
